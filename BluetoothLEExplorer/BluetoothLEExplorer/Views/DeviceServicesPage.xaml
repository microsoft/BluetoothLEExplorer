    <Page x:Class="BluetoothLEExplorer.Views.DeviceServicesPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:Behaviors="using:Template10.Behaviors"
      xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:Interactivity="using:Microsoft.Xaml.Interactivity"
      xmlns:controls="using:Template10.Controls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="using:BluetoothLEExplorer.Views"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:myconverters="using:BluetoothLEExplorer.Services.Converters"
      xmlns:converters="using:Template10.Converters"
      xmlns:vm="using:BluetoothLEExplorer.ViewModels" x:Name="ThisPage"
      xmlns:models="using:BluetoothLEExplorer.Models"
      mc:Ignorable="d">

    <Page.DataContext>
        <vm:DeviceServicesPageViewModel x:Name="ViewModel" />
    </Page.DataContext>

    <Page.Resources>
        <converters:ValueWhenConverter x:Key="VisibleWhenBlankConverter" When="">
            <converters:ValueWhenConverter.Value>
                <Visibility>Collapsed</Visibility>
            </converters:ValueWhenConverter.Value>
            <converters:ValueWhenConverter.Otherwise>
                <Visibility>Visible</Visibility>
            </converters:ValueWhenConverter.Otherwise>
        </converters:ValueWhenConverter>

        <converters:ValueWhenConverter x:Key="VisibleWhenTrueConverter">
            <converters:ValueWhenConverter.When>
                <x:Boolean>True</x:Boolean>
            </converters:ValueWhenConverter.When>
            <converters:ValueWhenConverter.Value>
                <Visibility>Visible</Visibility>
            </converters:ValueWhenConverter.Value>
            <converters:ValueWhenConverter.Otherwise>
                <Visibility>Collapsed</Visibility>
            </converters:ValueWhenConverter.Otherwise>
        </converters:ValueWhenConverter>

        <converters:ValueWhenConverter x:Key="VisibleWhenFalseConverter">
            <converters:ValueWhenConverter.When>
                <x:Boolean>False</x:Boolean>
            </converters:ValueWhenConverter.When>
            <converters:ValueWhenConverter.Value>
                <Visibility>Visible</Visibility>
            </converters:ValueWhenConverter.Value>
            <converters:ValueWhenConverter.Otherwise>
                <Visibility>Collapsed</Visibility>
            </converters:ValueWhenConverter.Otherwise>
        </converters:ValueWhenConverter>

        <local:BackgroundColorConverter x:Key="BackgroundColorConverter"/>

        <myconverters:StringFormatConverter x:Key="StringFormatConverter" />
    </Page.Resources>

    <RelativePanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="AdaptiveVisualStateGroup">
                <VisualState x:Name="VisualStateNarrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NarrowMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for narrow view  -->
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateNormal">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NormalMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for normal view  -->
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateWide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource WideMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for wide view  -->
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <!--  header  -->
        <controls:PageHeader x:Name="pageHeader" Frame="{x:Bind Frame}"
                             RelativePanel.AlignLeftWithPanel="True"
                             RelativePanel.AlignRightWithPanel="True"
                             RelativePanel.AlignTopWithPanel="True" Text="Device Services Page" />

        <!--  content  -->

        <Grid RelativePanel.Below="pageHeader" Padding="10" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"  />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0">
                <TextBlock Text="{x:Bind ViewModel.Device.ErrorText}" Visibility="{x:Bind ViewModel.Device.ErrorText, Converter={StaticResource VisibleWhenBlankConverter}}" />
                <TextBlock IsTextSelectionEnabled="True">
                    <Run Text="BT Address: " />
                    <Run Text="{x:Bind ViewModel.Device.BluetoothAddressAsString, Mode=OneWay}"/>
                </TextBlock>
                <TextBlock>
                    <Run Text="Number of Services:" />
                    <Run Text="{x:Bind ViewModel.Device.Services.Count, Mode=OneWay}" />
                </TextBlock>
                <TextBlock>
                    <Run Text="Number of service changed events:" />
                    <Run Text="{x:Bind ViewModel.Device.GattServicesChangedInstances, Mode=OneWay}" />
                </TextBlock>
                <TextBlock>
                    <Run Text="Number of Advertisement Services:" />
                    <Run Text="{x:Bind ViewModel.Device.AdvertisementServiceCount, Mode=OneWay}" />
                </TextBlock>
                <TextBlock Visibility="{x:Bind ViewModel.IsSecureConnectionSupported, Converter={StaticResource VisibleWhenTrueConverter}}" >
                    <Run Text="BT 4.2 Secure Connection:" />
                    <Run Text="{x:Bind ViewModel.Device.IsSecureConnection, Mode=OneWay}" />
                </TextBlock>
                <Border Background="{x:Bind ViewModel.Device.IsConnected, Converter={StaticResource BackgroundColorConverter}}">
                    <TextBlock>
                    <Run Text="Device Connected:" />
                    <Run Text="{x:Bind ViewModel.Device.IsConnected, Mode=OneWay}" />
                    </TextBlock>
                </Border>
                <Button Name="RefreshButton" Click="{x:Bind ViewModel.Refresh}"  Margin="0,5">Refresh</Button>
                <Button Name="StartTransactionButton" Margin="0,5" Click="{x:Bind ViewModel.StartTransaction}" Visibility="{x:Bind ViewModel.IsTransactionInProgress, Converter={StaticResource VisibleWhenFalseConverter}, Mode=OneWay}">Start Transaction</Button>
                <Button Name="CommitTransactionButton" Margin="0,5" Click="{x:Bind ViewModel.CommitTransaction}" Visibility="{x:Bind ViewModel.IsTransactionInProgress, Converter={StaticResource VisibleWhenTrueConverter}, Mode=OneWay}">Commit Transaction</Button>
            </StackPanel>
            <ScrollViewer Grid.Row="1" Margin="0,10,0,0" ScrollViewer.VerticalScrollBarVisibility="Auto">
                <ListView  x:Name="ServicesListView"
                           IsItemClickEnabled="True"
                           SelectionMode="Single"
                           ItemsSource="{x:Bind ViewModel.Device.Services, Mode=OneWay}"
                           ItemClick="ServicesListView_ItemClick">

                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="models:ObservableGattDeviceService" >
                            <StackPanel Margin="0,0,0,15">
                                <TextBlock >
                                    <Run Text="Service Name: " />
                                    <Run Text="{x:Bind Name}" FontWeight="Bold" />
                                </TextBlock>
                                <TextBlock FontSize="12">
                                    <Run Text="Service UUID: " />
                                    <Run Text="{x:Bind UUID}" FontWeight="Bold" />
                                </TextBlock>
                                <ListView x:Name="CharacteristicsListView"
                                            IsItemClickEnabled="True"
                                            SelectionMode="Single"
                                            ItemsSource="{x:Bind Characteristics}"
                                            ItemClick="CharacteristicsListView_ItemClick" >
                                    <ListView.ItemTemplate >
                                        <DataTemplate x:DataType="models:ObservableGattCharacteristics" >
                                            <TextBlock TextWrapping="WrapWholeWords">
                                                <Run x:Name="CharacteristicText" Text="Characteristic Name:" />
                                                <Run Text="{x:Bind Name, Mode=OneWay}" FontWeight="Bold" />
                                                <Run Text=" - User Description: " />
                                                <Run x:Name="CharacteristicUserDescription" Text="{x:Bind Characteristic.UserDescription, Mode=OneWay}" />
                                                <Run Text=" - " />
                                                <Run x:Name="CharacteristicHandleText" Text="Handle: " />
                                                <Run Text="{x:Bind Characteristic.AttributeHandle, Mode=OneWay}" FontWeight="Bold" />
                                                <Run Text=" - " />
                                                <Run Text="{x:Bind Characteristic.AttributeHandle, Mode=OneWay,Converter={StaticResource StringFormatConverter}, ConverterParameter='0x{0:X8}'}" FontWeight="Bold" />
                                                <Run Text=" - " />
                                                <Run x:Name="CharValueText" Text="Value: " />
                                                <Run Text="{x:Bind Value, Mode=OneWay}" FontWeight="Bold" />
                                            </TextBlock>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </ScrollViewer>
        </Grid>
    </RelativePanel>
</Page>

